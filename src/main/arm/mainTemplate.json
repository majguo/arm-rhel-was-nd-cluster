{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "_artifactsLocation": {
            "type": "string",
            "defaultValue": "[deployment().properties.templateLink.uri]",
            "metadata": {
                "description": "The base URI where artifacts required by this template are located. When the template is deployed using the accompanying scripts, a private location in the subscription will be used and this value will be automatically generated."
            }
        },
        "_artifactsLocationSasToken": {
            "type": "securestring",
            "defaultValue": "",
            "metadata": {
                "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated. Use the defaultValue if the staging location is not secured."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Location for all resources."
            }
        },
        "dynamic": {
            "defaultValue": false,
            "type": "bool",
            "metadata": {
                "description": "Boolean value indicating, if the cluster is a dynamic one or not."
            }
        },
        "numberOfNodes": {
            "type": "int",
            "metadata": {
                "description": "The number of VMs to create, with one deployment manager and multiple worker nodes for the remainings."
            }
        },
        "dmgrVMPrefix": {
            "type": "string",
            "metadata": {
                "description": "The string to prepend to the name of the deployment manager server."
            }
        },
        "managedVMPrefix": {
            "type": "string",
            "metadata": {
                "description": "The string to prepend to the name of the managed server."
            }
        },
        "dnsLabelPrefix": {
            "type": "string",
            "metadata": {
                "description": "The string to prepend to the DNS label."
            }
        },
        "vmSize": {
            "defaultValue": "Standard_D2_v3",
            "type": "string",
            "metadata": {
                "description": "The size of virtual machine to provision for each node of the cluster."
            }            
        },
        "ibmUserId": {
            "defaultValue": "",
            "type": "string",
            "metadata": {
                "description": "User name of your IBMid account."
            }
        },
        "ibmUserPwd": {
            "defaultValue": "",
            "type": "securestring",
            "metadata": {
                "description": "Password of your IBMid account."
            }
        },
        "adminUsername": {
            "type": "string",
            "metadata": {
                "description": "User name for the Virtual Machine."
            }
        },
        "adminPasswordOrKey": {
            "type": "securestring",
            "metadata": {
                "description": "SSH Key or password for the Virtual Machine. SSH key is recommended."
            }
        },
        "authenticationType": {
            "type": "string",
            "defaultValue": "password",
            "allowedValues": [
                "sshPublicKey",
                "password"
            ],
            "metadata": {
                "description": "Type of authentication to use on the Virtual Machine. SSH key is recommended."
            }
        },
        "wasUsername": {
            "type": "string",
            "metadata": {
                "description": "User name for your WebSphere admin console."
            }
        },
        "wasPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Password for your WebSphere admin console."
            }
        },
        "guidValue": {
            "defaultValue": "[newGuid()]",
            "type": "string"
        }
    },
    "variables": {
        "const_addressPrefix": "10.0.0.0/16",
        "const_arguments": "[concat(' -m ',parameters('wasUsername'),' -c ',parameters('wasPassword'),' -h ',variables('name_dmgrVM'),' -r ',sub(parameters('numberOfNodes'),1),' -x ',parameters('dynamic'))]",
        "const_dnsLabelPrefix": "[concat(parameters('dnsLabelPrefix'), take(replace(parameters('guidValue'),'-',''),6))]",
        "const_linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
                "publicKeys": [
                    {
                        "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
                        "keyData": "[parameters('adminPasswordOrKey')]"
                    }
                ]
            }
        },
        "const_managedVMPrefix": "[concat(parameters('managedVMPrefix'), take(replace(parameters('guidValue'),'-',''),6), 'VM')]",
        "const_scriptLocation": "[uri(parameters('_artifactsLocation'), 'scripts/')]",
        "const_subnetAddressPrefix": "10.0.1.0/24",
        "const_subnetName": "subnet01",
        "name_dmgrVM": "[concat(parameters('dmgrVMPrefix'), take(replace(parameters('guidValue'),'-',''),6), 'VM')]",
        "name_networkSecurityGroup": "[concat(variables('const_dnsLabelPrefix'), '-nsg')]",
        "name_publicIPAddress": "[concat(variables('name_dmgrVM'), '-ip')]",
        "name_storageAccount": "[concat('storage',take(replace(parameters('guidValue'),'-',''),6))]",
        "name_virtualNetwork": "[concat(variables('const_dnsLabelPrefix'), '-vnet')]",
        "ref_networkSecurityGroup": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('name_networkSecurityGroup'))]",
        "ref_storage": "[resourceId('Microsoft.Storage/storageAccounts', variables('name_storageAccount'))]",
        "ref_subnet": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('name_virtualNetwork'), variables('const_subnetName'))]",
        "ref_virtualNetwork": "[resourceId('Microsoft.Network/virtualNetworks', variables('name_virtualNetwork'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "${azure.apiVersion2}",
            "name": "[variables('name_storageAccount')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_LRS"
            },
            "kind": "Storage",
            "properties": {
            }
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "${azure.apiVersion}",
            "name": "[variables('name_networkSecurityGroup')]",
            "location": "[parameters('location')]",
            "properties": {
                "securityRules": [
                    {
                        "name": "TCP",
                        "properties": {
                            "protocol": "TCP",
                            "sourcePortRange": "*",
                            "sourceAddressPrefix": "*",
                            "destinationAddressPrefix": "*",
                            "access": "Allow",
                            "priority": 300,
                            "direction": "Inbound",
                            "destinationPortRanges": [
                                "9060",
                                "9080",
                                "9043",
                                "9443"
                            ]
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks",
            "apiVersion": "${azure.apiVersion}",
            "name": "[variables('name_virtualNetwork')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[variables('ref_networkSecurityGroup')]"
            ],
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('const_addressPrefix')]"
                    ]
                },
                "enableDdosProtection": false,
                "enableVmProtection": false
            }
        },
        {
            "type": "Microsoft.Network/virtualNetworks/subnets",
            "apiVersion": "${azure.apiVersion}",
            "name": "[concat(variables('name_virtualNetwork'), '/', variables('const_subnetName'))]",
            "dependsOn": [
                "[variables('ref_virtualNetwork')]",
                "[variables('ref_networkSecurityGroup')]"
            ],
            "properties": {
                "addressPrefix": "[variables('const_subnetAddressPrefix')]",
                "networkSecurityGroup": {
                    "id": "[variables('ref_networkSecurityGroup')]"
                }
            }
        },
        {
            "type": "Microsoft.Network/publicIPAddresses",
            "apiVersion": "${azure.apiVersion}",
            "name": "[concat(if(equals(copyIndex(), 0), variables('name_dmgrVM'), concat(variables('const_managedVMPrefix'), copyIndex())), '-ip')]",
            "location": "[parameters('location')]",
            "copy": {
                "name": "publicIPLoop",
                "count": "[parameters('numberOfNodes')]"
            },
            "properties": {
                "publicIPAllocationMethod": "Dynamic",
                "dnsSettings": {
                    "domainNameLabel": "[concat(toLower(variables('const_dnsLabelPrefix')), if(equals(copyIndex(), 0), '', concat('-mn', copyIndex())))]"
                }
            }
        },
        {
            "type": "Microsoft.Network/networkInterfaces",
            "apiVersion": "${azure.apiVersion}",
            "name": "[concat(if(equals(copyIndex(), 0), variables('name_dmgrVM'), concat(variables('const_managedVMPrefix'), copyIndex())), '-if')]",
            "location": "[parameters('location')]",
            "copy": {
                "name": "nicLoop",
                "count": "[parameters('numberOfNodes')]"
            },
            "dependsOn": [
                "publicIPLoop",
                "[variables('ref_subnet')]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(if(equals(copyIndex(), 0), variables('name_dmgrVM'), concat(variables('const_managedVMPrefix'), copyIndex())), '-ip'))]"
                            },
                            "subnet": {
                                "id": "[variables('ref_subnet')]"
                            }
                        }
                    }
                ]
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines",
            "apiVersion": "${azure.apiVersion}",
            "name": "[if(equals(copyIndex(), 0), variables('name_dmgrVM'), concat(variables('const_managedVMPrefix'), copyIndex()))]",
            "location": "[parameters('location')]",
            "copy": {
                "name": "virtualMachineLoop",
                "count": "[parameters('numberOfNodes')]"
            },
            "dependsOn": [
                "nicLoop"
            ],
            "properties": {
                "hardwareProfile": {
                    "vmSize": "[parameters('vmSize')]"
                },
                "storageProfile": {
                    "imageReference": {
                        "publisher": "${image.publisher}",
                        "offer": "${image.offer}",
                        "sku": "${image.sku}",
                        "version": "latest"
                    },
                    "osDisk": {
                        "name": "[concat(if(equals(copyIndex(), 0), variables('name_dmgrVM'), concat(variables('const_managedVMPrefix'), copyIndex())), '-disk')]",
                        "createOption": "FromImage",
                        "managedDisk": {
                            "storageAccountType": "Standard_LRS"
                        }
                    }
                },
                "osProfile": {
                    "computerName": "[if(equals(copyIndex(), 0), variables('name_dmgrVM'), concat(variables('const_managedVMPrefix'), copyIndex()))]",
                    "adminUsername": "[parameters('adminUsername')]",
                    "adminPassword": "[parameters('adminPasswordOrKey')]",
                    "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('const_linuxConfiguration'))]",
                    "customData": "[base64(concat(parameters('ibmUserId'), ',', parameters('ibmUserPwd')))]"
                },
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(if(equals(copyIndex(), 0), variables('name_dmgrVM'), concat(variables('const_managedVMPrefix'), copyIndex())), '-if'))]"
                        }
                    ]
                },
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true,
                        "storageUri": "[reference(variables('ref_storage'), '${azure.apiVersion2}').primaryEndpoints.blob]"
                    }
                }
            },
            "plan": {
                "name": "${image.sku}",
                "publisher": "${image.publisher}",
                "product": "${image.offer}"
            }
        },
        {
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "apiVersion": "${azure.apiVersion}",
            "name": "[concat(if(equals(copyIndex(), 0), variables('name_dmgrVM'), concat(variables('const_managedVMPrefix'), copyIndex())), '/install')]",
            "location": "[parameters('location')]",
            "copy": {
                "name": "virtualMachineExtensionLoop",
                "count": "[parameters('numberOfNodes')]"
            },
            "dependsOn": [
                "virtualMachineLoop"
            ],
            "properties": {
                "autoUpgradeMinorVersion": true,
                "publisher": "Microsoft.Azure.Extensions",
                "type": "CustomScript",
                "typeHandlerVersion": "2.0",
                "settings": {
                    "fileUris": [
                        "[uri(variables('const_scriptLocation'), concat('install.sh', parameters('_artifactsLocationSasToken')))]",
                        "[uri(variables('const_scriptLocation'), concat('create-cluster.py', parameters('_artifactsLocationSasToken')))]",
                        "[uri(variables('const_scriptLocation'), concat('create-dcluster.py', parameters('_artifactsLocationSasToken')))]"
                    ],
                    "commandToExecute": "[concat('sh install.sh -f ', equals(copyIndex(), 0), variables('const_arguments'))]"
                }
            }
        }
    ],
    "outputs": {
        "resourceGroupName": {
            "type": "string",
            "value": "[resourceGroup().name]"
        },
        "region": {
            "type": "string",
            "value": "[parameters('location')]"
        },
        "clusterName": {
            "type": "string",
            "value": "MyCluster"
        },
        "nodeGroupName": {
            "type": "string",
            "value": "DefaultNodeGroup"
        },
        "coreGroupName": {
            "type": "string",
            "value": "DefaultCoreGroup"
        },
        "dmgrHostName": {
            "type": "string",
            "value": "[variables('name_dmgrVM')]"
        },
        "dmgrPort": {
            "type": "string",
            "value": "8879"
        },
        "virtualNetworkName": {
            "type": "string",
            "value": "[variables('name_virtualNetwork')]"
        },
        "subnetName": {
            "type": "string",
            "value": "[variables('const_subnetName')]"
        },
        "adminSecuredConsole": {
            "type": "string",
            "value": "[concat('https://',reference(variables('name_publicIPAddress')).dnsSettings.fqdn,':9043/ibm/console')]"
        }
    }
}
